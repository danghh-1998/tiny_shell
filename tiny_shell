#!/usr/bin/env bash

pid_regex="[0-9]+"
status_format='%-10s%-20s%-60s%-40s%-30s%-20s\n'
bg_process_regex='.+ &'

path() {
    [[ -n $1 ]] && echo ${!1} || printenv
}

dir() {
    if [[ ! -d $1 ]]; then
        echo "No such directory"
    else
        [[ -n $1 ]] && ls -A $1 || ls -A
    fi
}

addpath() {
    [[ $# -ne 2 ]] && echo 'Invalid syntax' || export $1=$2
}

echo_date() {
    date +"%A %d-%m-%Y"
}

echo_time() {
    date +"%r"
}

exec_bash() {
    if [[ "$@" =~ time ]]; then
        echo_time
    elif [[ "$@" =~ date ]]; then
        echo_date
    else
        eval $@
    fi
}

list_descendants() {
    local sub_processes=$(pgrep -P $1)
    [[ -n $sub_processes ]] && echo $sub_processes | tr ' ' '\n'
    for sub_process in $sub_processes; do
        list_descendants $sub_process
    done
}

pause() {
    [[ $# -lt 1 ]] && echo 'PID not specified'
    for pid in $@; do
        if ! [[ $pid =~ $pid_regex ]]; then
            echo 'Invalid PID'
            break
        else
            status=$(echo $(ps -q $pid -o state --no-header) | tr '[:upper:]' '[:lower:]')
            [[ -z $status || 'rs' != *"$status"* ]] &&
                echo 'No running processes were found' ||
                kill -STOP $pid
        fi
    done
}

resume() {
    [[ $# -lt 1 ]] && echo 'PID not specified'
    for pid in $@; do
        if ! [[ $pid =~ $pid_regex ]]; then
            echo 'Invalid PID'
            break
        else
            status=$(echo $(ps -q $pid -o state --no-header) | tr '[:upper:]' '[:lower:]')
            [[ -z $status || $status != 't' ]] &&
                echo 'No stopped processes were found' ||
                kill -CONT $pid
        fi
    done
}

status_without_header() {
    [[ -z $1 ]] && return 1
    fields=(pid user cmd state lstart etime)
    for field in "${fields[@]}"; do
        read ${field} <<<$(echo $(ps -q $1 -o $field --no-header))
    done
    case $state in
    D)
        state='Uninterruptible sleep'
        ;;
    R)
        state='Running or runnable'
        ;;
    S)
        state='Interruptible sleep'
        ;;
    T)
        state='Stopped by job control signal'
        ;;
    t)
        state='Stopped by debugger during the tracing'
        ;;
    W)
        state='Paging'
        ;;
    X)
        state='Dead'
        ;;
    Z)
        state='Defunct process'
        ;;
    esac
    printf "$status_format" "$pid" "$user" "$cmd" "$state" "$lstart" "$etime"
}

status() {
    if [[ -z "$(ps -p $pid -o pid=)" ]]; then
        echo "Process $1 not found"
    else
        printf "$status_format" PID USER COMMAND STATUS STARTED ELAPSED
        status_without_header $1
    fi
}

list() {
    pids=($(list_descendants $$))
    printf "$status_format" PID USER COMMAND STATUS STARTED ELAPSED
    for pid in "${pids[@]}"; do
        if [[ -z "$(ps -p $pid -o pid=)" ]]; then
            continue
        fi
        status_without_header $pid
    done
}

terminate() {
    [[ $# -lt 1 ]] && echo 'PID not specified'
    if ! [[ $1 =~ $pid_regex ]]; then
        echo 'Invalid PID'
    else
        status=$(echo $(ps -q $1 -o state --no-header) | tr '[:upper:]' '[:lower:]')
        if [[ -z $status || 'rst' != *"$status"* ]]; then
            echo 'Could not find out the process could be terminated'
        else
            pids=($(list_descendants $1))
            for pid in ${pids[@]}; do
                if [[ -z "$(ps -p $pid -o pid=)" ]]; then
                    continue
                fi
                kill $pid
                echo "Process $pid terminated"
            done
        fi
    fi
}

help() {
    echo "
                    WELCOME TO TINY SHELL

        Tiny shell support the following commands:

        dir       : Lists directory contents of files and directories.
        list      : List all background processes.
        status    : Print the current status of a specific process
        addpath   : Add an environment variable to the current shell.
        path      : Print \$PATH
        pause     : Pause a process.
        resume    : Resume a process.
        terminate : Terminate a process.
        <cmd>     : Execute the process given by <cmd>.
        exit      : Exit tiny shell.
        help      : Print this help.


    "
}

main() {
    help
    read -p '>>> ' statement
    statement=$(echo $statement | tr -d '[:cntrl:]\n')
    while [[ $statement != 'exit' ]]; do
        IFS=$' ' read -a split_statement <<<$statement
        command=${split_statement[0]}
        available_commands=$(compgen -c)
        if [[ $available_commands == *"$command"* ]]; then
            if [[ $statement =~ $bg_process_regex ]]; then
                exec_bash $statement >/dev/null 2>&1
            else
                exec_bash $statement
            fi
        else
            echo "Bad command"
        fi
        read -p '>>> ' statement
        statement=$(echo $statement | tr -d '[:cntrl:]\n')
    done
}

IFS=$',' read -a path_arr <<<$(echo $PATH | tr ':' ',')
! [[ "$PATH" == *"$PWD"* ]] && export PATH="$PATH":"$PWD"
chmod -R +x $PWD
trap main SIGINT
main
terminate $$
